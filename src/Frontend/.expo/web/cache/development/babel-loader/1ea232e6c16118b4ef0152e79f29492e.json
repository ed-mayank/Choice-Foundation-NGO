{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport ReviewDetails from \"./ReviewDetails\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Reminder = function Reminder(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      GCS_List = _useState2[0],\n      setGCS_List = _useState2[1];\n\n  var gcs = [];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      patients = _useState4[0],\n      setPatients = _useState4[1];\n\n  function GetLists() {\n    axios.get(\"http://localhost:4000/get/GCS\").then(function (response) {\n      if (response.data != null) {\n        console.log(response.data);\n\n        for (var i = 0; i < response.data.length; i++) {\n          if (response.data[i].Time) {\n            gcs.push(resp);\n          }\n        }\n      } else {\n        alert(\"Unable to get previous data!\");\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  useEffect(function () {\n    if (localStorage.getItem('user_data') == null) {\n      alert(\"Unauthorised Access\");\n      navigate(\"/\");\n    }\n\n    GetLists();\n  }, []);\n  var navigate = useNavigate();\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      name = _useState8[0],\n      onChangeName = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      gender = _useState10[0],\n      onChangeGender = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      patientIp = _useState12[0],\n      onChangePatientIp = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      date = _useState14[0],\n      onChangeDate = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      _useState16 = _slicedToArray(_useState15, 2),\n      time = _useState16[0],\n      onChangeTime = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      open = _useState18[0],\n      setOpen = _useState18[1];\n\n  var resetInputs = function resetInputs() {\n    onChangeName(\"\");\n    onChangeGender(\"\");\n    onChangePatientIp(\"\");\n    onChangeDate(\"\");\n    onChangeTime(\"\");\n  };\n\n  var addPatient = function addPatient(patientName, gender, patientID, createDateTime, emailId, address, city, stateCountry, pincode, country, status, title) {\n    var response, data;\n    return _regeneratorRuntime.async(function addPatient$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(JSON.stringify({\n              patientName: patientName,\n              gender: gender,\n              age: age,\n              patientID: patientID,\n              createDateTime: createDateTime,\n              emailId: emailId,\n              address: address,\n              city: city,\n              stateCountry: stateCountry,\n              pincode: pincode,\n              country: country,\n              status: status,\n              title: title\n            }));\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://devapi.igzolt.in/index.php/v1/patient/registerPatient', {\n              mode: 'cors',\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                patientName: patientName,\n                gender: gender,\n                patientID: patientID,\n                createDateTime: createDateTime,\n                emailId: emailId,\n                address: address,\n                city: city,\n                stateCountry: stateCountry,\n                pincode: pincode,\n                country: country,\n                status: status,\n                title: title\n              })\n            }).catch(function (e) {\n              console.log(e);\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context.sent;\n            console.log(data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onSubmit = function onSubmit(event) {\n    setModalVisible(!modalVisible);\n    event.preventDefault();\n    var newPatient = {\n      patientName: name,\n      gender: gender,\n      patientID: patientIp,\n      createDateTime: date + \" \" + time,\n      address: \"\",\n      emailId: \"\",\n      city: \"\",\n      stateCountry: \"\",\n      pincode: \"\",\n      country: \"INDIA\",\n      status: \"\",\n      title: \"\"\n    };\n    console.log(newPatient);\n    addPatient(newPatient.patientName, newPatient.gender, newPatient.patientID, newPatient.createDateTime, newPatient.address, newPatient.emailId, newPatient.city, newPatient.stateCountry, newPatient.pincode, newPatient.country, newPatient.status, newPatient.title);\n    resetInputs();\n  };\n\n  var _useState19 = useState(patients),\n      _useState20 = _slicedToArray(_useState19, 2),\n      searchData = _useState20[0],\n      setSearchData = _useState20[1];\n\n  var searchItem = function searchItem(query) {\n    if (!query) {\n      setPatients(patient_List);\n      return;\n    }\n\n    var finalResult = [];\n    patient_List.forEach(function (item) {\n      if (item.P_ID.indexOf(query) !== -1) {\n        finalResult.push(item);\n      }\n    });\n    setPatients(finalResult);\n  };\n\n  return _jsxs(SafeAreaView, {\n    children: [_jsx(Modal, {\n      animationType: \"fade\",\n      transparent: true,\n      visible: modalVisible,\n      children: _jsxs(View, {\n        style: styles.centeredView,\n        children: [_jsx(Text, {\n          children: \"Patient Name\"\n        }), _jsx(TextInput, {\n          style: styles.input,\n          onChangeText: onChangeName,\n          value: name,\n          placeholder: \"Patient Name\",\n          keyboardType: \"ascii-capable\"\n        }), _jsx(Text, {\n          children: \"Gender\"\n        }), _jsx(TextInput, {\n          style: styles.input,\n          onChangeText: onChangeGender,\n          value: gender,\n          placeholder: \"Gender\",\n          keyboardType: \"ascii-capable\"\n        }), _jsx(Text, {\n          children: \"Patient IP\"\n        }), _jsx(TextInput, {\n          style: styles.input,\n          onChangeText: onChangePatientIp,\n          value: patientIp,\n          placeholder: \"Patient IP\",\n          keyboardType: \"ascii-capable\"\n        }), _jsx(Text, {\n          children: \"Time of Admission(YYYY-MM-DD)\"\n        }), _jsx(TextInput, {\n          style: styles.input,\n          format: \"DD-MM-YYYY\",\n          onChangeText: onChangeDate,\n          value: date,\n          placeholder: \"Date of Admission(YYYY-MM-DD)\",\n          keyboardType: \"decimal-pad\"\n        }), _jsx(Text, {\n          children: \"Time of Admission(HH:MM:SS)\"\n        }), _jsx(TextInput, {\n          style: styles.input,\n          onChangeText: onChangeTime,\n          value: time,\n          placeholder: \"Time of Admission\",\n          keyboardType: \"decimal-pad\"\n        }), _jsxs(View, {\n          style: styles.container1,\n          children: [_jsx(Pressable, {\n            children: _jsx(Icon.Button, {\n              style: styles.buttonOpen,\n              onPress: onSubmit,\n              children: \"Register\"\n            })\n          }), _jsx(Pressable, {\n            children: _jsx(Icon.Button, {\n              style: styles.buttonOpen,\n              onPress: function onPress() {\n                return setModalVisible(false);\n              },\n              children: \"Cancel\"\n            })\n          })]\n        })]\n      })\n    }), _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        children: _jsx(Pressable, {\n          children: _jsx(Icon.Button, {\n            name: \"plus\",\n            style: styles.buttonOpen,\n            onPress: function onPress() {\n              return setModalVisible(true);\n            },\n            children: \"Add New Patient\"\n          })\n        })\n      }), _jsxs(View, {\n        style: styles.container1,\n        children: [_jsx(Icon, {\n          style: styles.searchIcon,\n          name: \"search\",\n          size: 20,\n          color: \"#56BF9C\"\n        }), _jsx(TextInput, {\n          inlineImageLeft: \"search_icon\",\n          style: styles.buttonfuzzySearch,\n          type: \"search\",\n          placeholder: \"  Search Patient By ID\",\n          onChange: function onChange(e) {\n            return searchItem(e.target.value);\n          }\n        })]\n      })]\n    }), patients.map(function (patient) {\n      return _jsx(ReviewDetails, {\n        patient: patient\n      }, patient.P_ID);\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: 5,\n    paddingBottom: 5\n  },\n  container1: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'flex-end'\n  },\n  centeredView: {\n    flex: 1,\n    margin: 50,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 15,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.75,\n    shadowRadius: 4,\n    elevation: 15\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  buttonOpen: {\n    backgroundColor: \"#56BF9C\"\n  },\n  buttonOpen1: {\n    backgroundColor: \"#56BF9C\",\n    padding: 4\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 5\n  },\n  buttonfuzzySearch: {\n    borderWidth: 2,\n    borderRadius: 8,\n    borderColor: \"#56BF9C\",\n    strokeWidth: \"1\"\n  },\n  searchIcon: {\n    padding: 5\n  }\n});\nexport default Reminder;","map":{"version":3,"sources":["/home/mayank/DASSProject/DASS2K22-Team-48/src/Frontend/components/Reminder.js"],"names":["React","useContext","useEffect","useState","useNavigate","Icon","ReviewDetails","axios","Reminder","props","GCS_List","setGCS_List","gcs","patients","setPatients","GetLists","get","then","response","data","console","log","i","length","Time","push","resp","alert","catch","error","localStorage","getItem","navigate","modalVisible","setModalVisible","name","onChangeName","gender","onChangeGender","patientIp","onChangePatientIp","date","onChangeDate","time","onChangeTime","open","setOpen","resetInputs","addPatient","patientName","patientID","createDateTime","emailId","address","city","stateCountry","pincode","country","status","title","JSON","stringify","age","fetch","mode","method","headers","body","e","json","onSubmit","event","preventDefault","newPatient","searchData","setSearchData","searchItem","query","patient_List","finalResult","forEach","item","P_ID","indexOf","styles","centeredView","input","container1","buttonOpen","container","searchIcon","buttonfuzzySearch","target","value","map","patient","StyleSheet","create","flex","flexDirection","justifyContent","paddingTop","paddingBottom","margin","backgroundColor","borderRadius","padding","alignItems","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","modalView","buttonOpen1","borderWidth","borderColor","strokeWidth"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport {\n    Alert,\n    Button,\n    ImageBackground,\n    StyleSheet,\n    Modal,\n    Text,\n    Pressable,\n    View,\n    SafeAreaView,\n    TextInput\n} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport ReviewDetails from './ReviewDetails';\nimport axios from 'axios'\n\nconst Reminder = (props) => {\n    const [GCS_List, setGCS_List] = useState([]);\n    let gcs=[]\n    const [patients, setPatients] = useState();\n    function GetLists(){\n        axios\n      .get(\"http://localhost:4000/get/GCS\")\n      .then((response) => {\n        if ((response.data) != null ) {\n          console.log(response.data)\n          for(var i =0;i<response.data.length;i++)\n          {\n              if(response.data[i].Time )\n              {\n                  gcs.push(resp)\n              }\n          }\n\n        }\n        else {\n          alert(\"Unable to get previous data!\");\n\n        }\n        // console.log(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    }\n    useEffect(() => {\n        if (localStorage.getItem('user_data') == null) {\n            alert(\"Unauthorised Access\")\n            navigate(\"/\")\n        }\n       \n        GetLists();\n    }, []);\n\n    const navigate = useNavigate();\n\n    const [modalVisible, setModalVisible] = useState(false);\n    const [name, onChangeName] = useState(\"\");\n    // const [age, onChangeAge] = useState(\"\")\n    const [gender, onChangeGender] = useState(\"\")\n    const [patientIp, onChangePatientIp] = useState(\"\")\n    const [date, onChangeDate] = useState(\"\");\n    const [time, onChangeTime] = useState(\"\");\n    const [open, setOpen] = useState(false);\n\n    const resetInputs = () => {\n        onChangeName(\"\");\n        // onChangeAge(\"\");\n        onChangeGender(\"\");\n        onChangePatientIp(\"\");\n        onChangeDate(\"\");\n        onChangeTime(\"\");\n    };\n\n    const addPatient = async (patientName, gender, patientID,\n        createDateTime, emailId, address, city, stateCountry,\n        pincode, country, status, title) => {\n\n        console.log(JSON.stringify({\n            patientName, gender, age, patientID,\n            createDateTime, emailId, address, city, stateCountry,\n            pincode, country, status, title\n        }))\n        const response = await fetch('https://devapi.igzolt.in/index.php/v1/patient/registerPatient', {\n            mode: 'cors',\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                patientName, gender, patientID,\n                createDateTime, emailId, address, city, stateCountry,\n                pincode, country, status, title\n            })\n        }).catch((e) => {\n            console.log(e)\n        })\n        const data = await response.json();\n        console.log(data);\n    }\n\n    const onSubmit = (event) => {\n        setModalVisible(!modalVisible)\n        event.preventDefault();\n\n        const newPatient = {\n            patientName: name,\n            // age: age,\n            gender: gender,\n            patientID: patientIp,\n            createDateTime: date + \" \" + time,\n            // date: date,\n            // time: time,\n            // createDateTime: \"2022-04-18 10:24:28\",\n\n            address: \"\",\n            emailId: \"\",\n            city: \"\",\n            stateCountry: \"\",\n            pincode: \"\",\n            country: \"INDIA\",\n            status: \"\",\n            title: \"\"\n\n            // createId: \"\",\n            // dateOfBirth: \"2015-04-17\",\n            // familyGroupId: \"\",\n            // familyGroupRegistration: \"\",\n            // identityIdNr: \"\",\n            // identityType: \"\",\n            // mobileNumber: 999999999,\n            // nextOfKin1Mobilenr: null,\n            // nextOfKin1Name: \"\",\n            // nextOfKin1Relation: \"\",\n            // nextOfKinMobilenr: 999999999,\n            // nextOfKinName: \"Ramu\",\n            // nextOfKinRelation: \"Father\",\n            // patientID: 0,\n            // firstName: \"\",\n            // lastName: \"\",\n            // permanentHomeAddress: \"\",\n            // regDate: \"2022-04-18\"\n\n        }\n        console.log(newPatient);\n\n        // post patient to backend\n        addPatient(\n            newPatient.patientName,\n            // newPatient.age,\n            newPatient.gender,\n            newPatient.patientID,\n            newPatient.createDateTime,\n            // newPatient.date,\n            // newPatient.time,\n            newPatient.address,\n\n            newPatient.emailId,\n\n            newPatient.city,\n            newPatient.stateCountry,\n            newPatient.pincode,\n            newPatient.country,\n            newPatient.status,\n            newPatient.title\n        );\n        resetInputs();\n    };\n\n    // for fuzzy search\n    const [searchData, setSearchData] = useState(patients);\n    const searchItem = (query) => {\n        if (!query) {\n            setPatients(patient_List);\n            return;\n        }\n        const finalResult = [];\n        patient_List.forEach((item) => {\n            if (\n                item.P_ID.indexOf(query) !== -1\n            ) {\n                finalResult.push(item);\n            }\n        });\n        setPatients(finalResult);\n    };\n\n    return (\n        <SafeAreaView >\n            <Modal\n                animationType=\"fade\"\n                transparent={true}\n                visible={modalVisible}\n            >\n                <View\n                    style={styles.centeredView}\n                >\n                    <Text>Patient Name</Text>\n                    <TextInput\n                        style={styles.input}\n                        onChangeText={onChangeName}\n                        value={name}\n                        placeholder=\"Patient Name\"\n                        keyboardType=\"ascii-capable\"\n                    />\n                    {/* <Text>Age</Text>\n                    <TextInput\n                        style={styles.input}\n                        onChangeText={onChangeAge}\n                        value={age}\n                        placeholder=\"Patient Age\"\n                        keyboardType=\"numeric\"\n                    /> */}\n                    <Text>Gender</Text>\n                    <TextInput\n                        style={styles.input}\n                        onChangeText={onChangeGender}\n                        value={gender}\n                        placeholder=\"Gender\"\n                        keyboardType=\"ascii-capable\"\n                    />\n                    <Text>Patient IP</Text>\n                    <TextInput\n                        style={styles.input}\n                        onChangeText={onChangePatientIp}\n                        value={patientIp}\n                        placeholder=\"Patient IP\"\n                        keyboardType=\"ascii-capable\"\n                    />\n                    <Text>Time of Admission(YYYY-MM-DD)</Text>\n                    <TextInput\n                        style={styles.input}\n                        format=\"DD-MM-YYYY\"\n                        onChangeText={onChangeDate}\n                        value={date}\n                        placeholder=\"Date of Admission(YYYY-MM-DD)\"\n                        keyboardType=\"decimal-pad\"\n                    />\n                    <Text>Time of Admission(HH:MM:SS)</Text>\n                    <TextInput\n                        style={styles.input}\n                        onChangeText={onChangeTime}\n                        value={time}\n                        placeholder=\"Time of Admission\"\n                        keyboardType=\"decimal-pad\"\n                    />\n                    <View style={styles.container1}>\n                        <Pressable>\n                            <Icon.Button\n                                // name=\"plus\"\n                                // title=\"submit\"\n                                style={styles.buttonOpen}\n                                onPress={onSubmit}\n                            >\n                                Register\n                            </Icon.Button>\n                        </Pressable>\n\n                        <Pressable>\n                            <Icon.Button\n                                // name=\"search\"\n                                // title=\"Cancel\"\n                                style={styles.buttonOpen}\n                                onPress={() => setModalVisible(false)}\n                            >\n                                Cancel\n                            </Icon.Button>\n                        </Pressable>\n                    </View>\n\n                </View>\n            </Modal >\n            <View style={styles.container}>\n                <Text>\n                    <Pressable>\n                        <Icon.Button\n                            name=\"plus\"\n                            style={styles.buttonOpen}\n                            onPress={() => setModalVisible(true)}\n                        >\n                            Add New Patient\n                        </Icon.Button>\n                    </Pressable>\n                </Text>\n                {/* <Text>\n                    <Pressable>\n                        <Icon.Button\n                            name=\"search\"\n                            style={styles.buttonOpen}\n                        >\n                            Search Patient\n                        </Icon.Button>\n                    </Pressable>\n                </Text> */}\n                {/* <div className=\"search-container\">\n                    <input\n                        type=\"search\"\n                        onChange={(e) => searchItem(e.target.value)}\n                        placeholder=\"Search Patient By ID\"\n                    />\n                </div> */}\n                <View style={styles.container1}>\n                    <Icon\n                        style={styles.searchIcon}\n                        name=\"search\"\n                        size={20}\n                        color=\"#56BF9C\"\n                    />\n                    <TextInput\n                        inlineImageLeft='search_icon'\n                        style={styles.buttonfuzzySearch}\n                        type=\"search\"\n                        placeholder=\"  Search Patient By ID\"\n                        onChange={(e) => searchItem(e.target.value)}\n                    />\n                </View>\n            </View>\n\n\n            {patients.map((patient) => {\n                return < ReviewDetails key={patient.P_ID} patient={patient} />\n            })\n            }\n        </SafeAreaView >\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        paddingTop: 5,\n        paddingBottom: 5,\n    },\n    container1: {\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        // paddingTop: 5,\n        // paddingBottom: 5,\n    },\n    centeredView: {\n        flex: 1,\n        margin: 50,\n        backgroundColor: \"white\",\n        borderRadius: 20,\n        padding: 15,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 5\n        },\n        shadowOpacity: 0.75,\n        shadowRadius: 4,\n        elevation: 15\n    },\n    modalView: {\n        margin: 20,\n        backgroundColor: \"white\",\n        borderRadius: 20,\n        padding: 35,\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5\n    },\n    buttonOpen: {\n        backgroundColor: \"#56BF9C\",\n    },\n    buttonOpen1: {\n        backgroundColor: \"#56BF9C\",\n        padding: 4,\n        // borderRadius: 30\n    },\n    input: {\n        height: 40,\n        margin: 12,\n        borderWidth: 1,\n        padding: 5,\n    },\n    buttonfuzzySearch: {\n        borderWidth: 2,\n        borderRadius: 8,\n        borderColor: \"#56BF9C\",\n        strokeWidth: \"1\"\n    },\n    searchIcon: {\n        padding: 5\n    }\n});\n\nexport default Reminder;\n"]},"metadata":{},"sourceType":"module"}
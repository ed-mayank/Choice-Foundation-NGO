{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction GetP_id() {\n  var c = 0;\n  var index = 0;\n  var path = location.pathname;\n\n  for (var i = 0; i < path.length; i++) {\n    if (path.charAt(i) == \"/\") {\n      c++;\n    }\n\n    if (c == 3) {\n      index = i;\n      break;\n    }\n\n    if (c == 2) {\n      index = path.length;\n    }\n  }\n\n  return path.substring(12, index);\n}\n\nfunction ReviewDetails(props) {\n  var _useState = useState(\"0\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      prismScore = _useState2[0],\n      setPrismScore = _useState2[1];\n\n  var patient = props.patient;\n  return _jsx(SafeAreaView, {\n    style: styles.card,\n    children: _jsx(\"text\", {\n      children: prismScore\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  card: {\n    borderRadius: 6,\n    elevation: 3,\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: 1,\n      height: 1\n    },\n    shadowColor: '#333',\n    shadowOpacity: 0.3,\n    shadowRadius: 2,\n    marginHorizontal: 4,\n    marginVertical: 6\n  },\n  cardContent: {\n    marginHorizontal: 18,\n    marginVertical: 8\n  }\n});\nexport default ReviewDetails;","map":{"version":3,"sources":["/home/mayank/DASSProject/DASS2K22-Team-48/src/Frontend/components/Assessment/Analysis.js"],"names":["React","useState","useEffect","useNavigate","useParams","useLocation","axios","GetP_id","c","index","path","location","pathname","i","length","charAt","substring","ReviewDetails","props","prismScore","setPrismScore","patient","styles","card","StyleSheet","create","borderRadius","elevation","backgroundColor","shadowOffset","width","height","shadowColor","shadowOpacity","shadowRadius","marginHorizontal","marginVertical","cardContent"],"mappings":";;;;;;;;;AAUE,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,kBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEF,SAASC,OAAT,GAAmB;AACf,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAGC,QAAQ,CAACC,QAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIH,IAAI,CAACK,MAAL,CAAYF,CAAZ,KAAkB,GAAtB,EAA2B;AACzBL,MAAAA,CAAC;AACF;;AACD,QAAIA,CAAC,IAAI,CAAT,EAAY;AACVC,MAAAA,KAAK,GAAGI,CAAR;AACA;AACD;;AACD,QAAIL,CAAC,IAAI,CAAT,EAAY;AACVC,MAAAA,KAAK,GAAGC,IAAI,CAACI,MAAb;AACD;AACF;;AACD,SAAOJ,IAAI,CAACM,SAAL,CAAe,EAAf,EAAmBP,KAAnB,CAAP;AAEH;;AAED,SAASQ,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,kBAAoCjB,QAAQ,CAAC,GAAD,CAA5C;AAAA;AAAA,MAAOkB,UAAP;AAAA,MAAmBC,aAAnB;;AA0BA,MAAQC,OAAR,GAAoBH,KAApB,CAAQG,OAAR;AACA,SACI,KAAC,YAAD;AAAc,IAAA,KAAK,EAAEC,MAAM,CAACC,IAA5B;AAAA,cACI;AAAA,gBAAOJ;AAAP;AADJ,IADJ;AAKH;;AAED,IAAMG,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC7BF,EAAAA,IAAI,EAAE;AACFG,IAAAA,YAAY,EAAE,CADZ;AAEFC,IAAAA,SAAS,EAAE,CAFT;AAGFC,IAAAA,eAAe,EAAE,MAHf;AAIFC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAJZ;AAKFC,IAAAA,WAAW,EAAE,MALX;AAMFC,IAAAA,aAAa,EAAE,GANb;AAOFC,IAAAA,YAAY,EAAE,CAPZ;AAQFC,IAAAA,gBAAgB,EAAE,CARhB;AASFC,IAAAA,cAAc,EAAE;AATd,GADuB;AAY7BC,EAAAA,WAAW,EAAE;AACTF,IAAAA,gBAAgB,EAAE,EADT;AAETC,IAAAA,cAAc,EAAE;AAFP;AAZgB,CAAlB,CAAf;AAkBA,eAAenB,aAAf","sourcesContent":["import {\n    StyleSheet,\n    Text,\n    View,\n    SafeAreaView,\n    Picker,\n    TextInput,\n    Button,\n    Pressable,\n  } from \"react-native\";\n  import React, { useState, useEffect } from \"react\";\n  import { useNavigate, useParams, useLocation } from \"react-router-dom\";\n  import axios from \"axios\";\n\nfunction GetP_id() {\n    var c = 0;\n    var index = 0;\n    var path = location.pathname;\n    for (var i = 0; i < path.length; i++) {\n      if (path.charAt(i) == \"/\") {\n        c++;\n      }\n      if (c == 3) {\n        index = i;\n        break;\n      }\n      if (c == 2) {\n        index = path.length;\n      }\n    }\n    return path.substring(12, index);\n  \n}\n\nfunction ReviewDetails(props) {\n    const [prismScore, setPrismScore] = useState(\"0\");\n\n    // function GetAssessment() {\n    //     axios\n    //       .get(\"http://localhost:4000/get/Prism/\" + GetP_id())\n    //       .then((response) => {\n    //         if ((response.data) != null && response.data.length==1) {\n    //           console.log(response.data[0])\n    //           console.log(\"hello\")\n    //           setPrismScore(response.data[0].Card_HR)\n    //         }\n    //         else {\n    //           alert(\"Unable to get previous data!\");\n    \n    //         }\n    //         // console.log(response.data);\n    //       })\n    //       .catch(function (error) {\n    //         console.log(error);\n    //       });\n    //   }\n    //   useEffect(() => {\n    //     // console.log(\"api\")\n    //     GetAssessment();\n    //   }, []);\n\n    const { patient } = props;\n    return (\n        <SafeAreaView style={styles.card}>\n            <text>{prismScore}</text>\n        </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    card: {\n        borderRadius: 6,\n        elevation: 3,\n        backgroundColor: '#fff',\n        shadowOffset: { width: 1, height: 1 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 2,\n        marginHorizontal: 4,\n        marginVertical: 6,\n    },\n    cardContent: {\n        marginHorizontal: 18,\n        marginVertical: 8,\n    }\n});\n\nexport default ReviewDetails;\n"]},"metadata":{},"sourceType":"module"}